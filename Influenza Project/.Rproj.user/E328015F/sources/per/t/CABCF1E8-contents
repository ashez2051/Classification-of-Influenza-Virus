---
title: "Influenza Project"
author: "Ashesh Raj Gnawali"
date: "January 16, 2020"
output: html_document
---

```{r message=FALSE, warning=FALSE}
library(tidyverse)
library(stringr)
```
# Part 1

Load the data
```{r}
lines <- readLines("Data/Neuraminidase.fasta")
view(lines)
```

Separating headers and sequences into two different columns:

```{r}

#Now, we separate Sequences and Headers
# Method-1  Loop

logicals<- str_detect(lines, pattern=">")  #returns boolean values
idx <- which(logicals)  #actual index positions of headers

#Store results in a tibble

fasta.table <- tibble(Header =lines[idx] ,
                      Sequence = rep("",
                                     times = length(idx))) # store the headers but the 
                                                            #sequence is empty

N.rows <- nrow(fasta.table) #total number of rows in the fasta table

for(row in 1:N.rows){
  
  l1 <- idx[row] +1  # first line of the chunk, just after the first header
  
  if( row == N.rows){
    l2 <- length(lines) 
  }else {
    l2 <- idx[row+1] -1  # last line of the chunk, before the subsequent header
  }

seq.lines <- lines[l1:l2]
sequence <- str_c(seq.lines, collapse="")
fasta.table$Sequence[row] <- sequence 
}

```

Now, Adding new columns Serotype, H.type and N.type

```{r}

fasta.table1 <- fasta.table %>% 
  mutate(Serotype = str_extract(Header, pattern = "H[0-9]{1,2}N[0-9]{1,2}"),
         H.Type = str_extract(Serotype, pattern = "H[0-9]{1,2}"),
         N.Type = str_extract(Serotype, pattern = "N[0-9]{1,2}"))

```

Removal of cases where the serotype is missing:

```{r}
fasta.table2 <- na.omit(fasta.table1)
```

# Plot

```{r}
ggplot(fasta.table2, aes(x= N.Type, y= H.Type), color = "red") +
  geom_count(aes(color = ..n.., size = ..n..)) +
    guides(color = 'legend')
  
```


Here we can see N1 and H1 as well as N2 and H3 are more associated than others.


# Part 2

```{r}
source("elmers.R")
source("lmercount.R")

count_matrix <- matrix(0, nrow = nrow(fasta.table2), ncol=16) # empty matrix of 16 cols and 
                                                             # rows equal to fasta.table2
colnames(count_matrix) <- elmers(2)  # using lmers function to name the columns

for(i in 1:nrow(fasta.table2)){
  count_matrix[i,] <- lmercount(fasta.table2$Sequence[i],2) # using lmercount function
}

# Relative occourances according to length

for(i in 1:16){
  relative_matrix_count <- count_matrix / sum(count_matrix[i,])
}

# Storing the data in the table

table.relative_matrix_count <- as_tibble(relative_matrix_count)

# Binding it to the table from Part-1

final.fasta <- bind_cols(fasta.table2, table.relative_matrix_count)

```


From the final table, extracting the subset containing the cases for N types, N1, N3 and N6 and fitting an LDA model to these data, using N-types as response.
```{r}

subset.table<- final.fasta %>% 
  filter(N.Type == "N1" | N.Type == "N2"| N.Type== "N3")

```

```{r}
x.train <- as.matrix(subset.table[6:21])
y.train <- subset.table$N.Type
trained.model <- MASS::lda(x.train,y.train) #prior=c(1,1,1,1,1,1,1,1,1)/9)
```

#Plotting
```{r}
a<- x.train %*% trained.model$scaling

tibble(Ntypes = subset.table$N.Type) %>% 
  bind_cols(as.tibble(a)) %>% 
  ggplot(aes(x=LD1, y=LD2, color= Ntypes))+
  geom_point(size = 2)
```



# Part 3

```{r}
source("KNNdistance.R")

x.test <- relative_matrix_count[1,] #x.test
x.train <- relative_matrix_count[1:50,] # x.train
dist <- as.vector(KNNdistance(x.test,x.train))
```

```{r}
source("Knnfunc.R")
knn.function(x.test, y.train, x.train, K)
  
```


# Cross Validation

Classification of N-types from the neuraminidase data from previous parts

```{r}
C <- 100
subset.table %>% 
  slice(sample(1:n())) %>%    # shuffle rows in random order
  arrange(N.Type) %>%     # then sort rows by the <response> column
  mutate(Segment = rep(1:C, length.out = n())) -> subset.table1
```

```{r}
K.values <- c(1, 3, 5)
Y.test <- matrix("", nrow = nrow(subset.table1), ncol = length(K.values))  
colnames(Y.test) <- str_c("K_", K.values)  # names to columns

```

```{r}
subset.table1 %>% 
  select(N.Type) -> tbl.y

subset.table1 %>% 
  select(6:21)-> tbl.X
```

```{r}
library(class)
for(i in 1:C){
  tst.rows <- which(subset.table1$Segment == i)   # the rows with segment equal to i
  X.test   <- as.matrix(tbl.X[tst.rows,])   # rows of tbl.X in segment i
  X.train  <- as.matrix(tbl.X[-tst.rows,])  # rows of tbl.X NOT in segment i
  y.train  <- as.matrix(tbl.y[-tst.rows,])  # rows of tbl.y NOT in segment i
  
  for(j in 1:ncol(Y.test)){         # looping over model complexities
    Y.test[tst.rows, j] <- as.character(knn(X.train, X.test, y.train, k = K.values[j]))
  }
}
```

# Wrapping it

```{r}
subset.table1 %>% 
  bind_cols(as_tibble(Y.test)) -> subset.table2
```

# Calculation of accuracy

```{r}
#k=1,
accuracy.knn1 <- sum(subset.table2$N.Type == subset.table2$K_1)/ 3109

#k=3,
accuracy.knn3 <- sum(subset.table2$N.Type == subset.table2$K_3)/ 3109
  
#k=5,

accuracy.knn5 <- sum(subset.table2$N.Type == subset.table2$K_5)/ 3109
```

# Visualizing the accuracy results

```{r}
tribble(
  ~K_Value, ~Accuracy,
  #--|--
  "K_1", accuracy.knn1, 
  "K_3", accuracy.knn3, 
  "K_5", accuracy.knn5
) -> accuracy
 

ggplot(accuracy)+
   geom_point(aes(K_Value, y = Accuracy, color= K_Value), size =4)
   
  
```



